
#line	26	"/n/bopp/v7/bwk/awk/awkgram.y"
#include <stdio.h>
#include <string.h>
#include "awk.h"

void checkdup(Node *list, Cell *item);
int yywrap(void) { return(1); }

Node	*beginloc = 0;
Node	*endloc = 0;
int	infunc	= 0;	/* = 1 if in arglist or body of func */
int	inloop	= 0;	/* = 1 if in while, for, do */
char	*curfname = 0;	/* current function name */
Node	*arglist = 0;	/* list of args for current function */

#line	41	"/n/bopp/v7/bwk/awk/awkgram.y"
typedef union  {
	Node	*p;
	Cell	*cp;
	int	i;
	char	*s;
} YYSTYPE;
extern	int	yyerrflag;
#ifndef	YYMAXDEPTH
#define	YYMAXDEPTH	150
#endif
YYSTYPE	yylval;
YYSTYPE	yyval;
#define	FIRSTTOKEN	57346
#define	PROGRAM	57347
#define	PASTAT	57348
#define	PASTAT2	57349
#define	XBEGIN	57350
#define	XEND	57351
#define	NL	57352
#define	ARRAY	57353
#define	MATCH	57354
#define	NOTMATCH	57355
#define	MATCHOP	57356
#define	FINAL	57357
#define	DOT	57358
#define	ALL	57359
#define	CCL	57360
#define	NCCL	57361
#define	CHAR	57362
#define	OR	57363
#define	STAR	57364
#define	QUEST	57365
#define	PLUS	57366
#define	AND	57367
#define	BOR	57368
#define	APPEND	57369
#define	EQ	57370
#define	GE	57371
#define	GT	57372
#define	LE	57373
#define	LT	57374
#define	NE	57375
#define	IN	57376
#define	ARG	57377
#define	BLTIN	57378
#define	BREAK	57379
#define	CLOSE	57380
#define	CONTINUE	57381
#define	DELETE	57382
#define	DO	57383
#define	EXIT	57384
#define	FOR	57385
#define	FUNC	57386
#define	SUB	57387
#define	GSUB	57388
#define	IF	57389
#define	INDEX	57390
#define	LSUBSTR	57391
#define	MATCHFCN	57392
#define	NEXT	57393
#define	NEXTFILE	57394
#define	ADD	57395
#define	MINUS	57396
#define	MULT	57397
#define	DIVIDE	57398
#define	MOD	57399
#define	ASSIGN	57400
#define	ASGNOP	57401
#define	ADDEQ	57402
#define	SUBEQ	57403
#define	MULTEQ	57404
#define	DIVEQ	57405
#define	MODEQ	57406
#define	POWEQ	57407
#define	PRINT	57408
#define	PRINTF	57409
#define	SPRINTF	57410
#define	ELSE	57411
#define	INTEST	57412
#define	CONDEXPR	57413
#define	POSTINCR	57414
#define	PREINCR	57415
#define	POSTDECR	57416
#define	PREDECR	57417
#define	VAR	57418
#define	IVAR	57419
#define	VARNF	57420
#define	CALL	57421
#define	NUMBER	57422
#define	STRING	57423
#define	REGEXPR	57424
#define	GETLINE	57425
#define	RETURN	57426
#define	SPLIT	57427
#define	SUBSTR	57428
#define	WHILE	57429
#define	CAT	57430
#define	NOT	57431
#define	UMINUS	57432
#define	POWER	57433
#define	DECR	57434
#define	INCR	57435
#define	INDIRECT	57436
#define	LASTTOKEN	57437
#define YYEOFCODE 1
#define YYERRCODE 2

#line	445	"/n/bopp/v7/bwk/awk/awkgram.y"


void setfname(Cell *p)
{
	if (isarr(p))
		SYNTAX("%s is an array, not a function", p->nval);
	else if (isfcn(p))
		SYNTAX("you can't define function %s more than once", p->nval);
	curfname = p->nval;
}

int constnode(Node *p)
{
	return isvalue(p) && ((Cell *) (p->narg[0]))->csub == CCON;
}

char *strnode(Node *p)
{
	return ((Cell *)(p->narg[0]))->sval;
}

Node *notnull(Node *n)
{
	switch (n->nobj) {
	case LE: case LT: case EQ: case NE: case GT: case GE:
	case BOR: case AND: case NOT:
		return n;
	default:
		return op2(NE, n, nullnode);
	}
}

void checkdup(Node *vl, Cell *cp)	/* check if name already in list */
{
	char *s = cp->nval;
	for ( ; vl; vl = vl->nnext) {
		if (strcmp(s, ((Cell *)(vl->narg[0]))->nval) == 0) {
			SYNTAX("duplicate argument %s", s);
			break;
		}
	}
}
short	yyexca[] =
{-1, 0,
	1, 28,
	8, 28,
	9, 28,
	12, 28,
	13, 28,
	16, 28,
	45, 28,
	46, 28,
	48, 28,
	54, 28,
	55, 28,
	56, 28,
	58, 28,
	60, 28,
	78, 28,
	86, 28,
	87, 28,
	88, 28,
	89, 28,
	90, 28,
	91, 28,
	95, 28,
	97, 28,
	98, 28,
	101, 28,
	102, 28,
	105, 28,
	108, 28,
	109, 28,
	110, 28,
	-2, 0,
-1, 1,
	1, -1,
	-2, 0,
-1, 157,
	15, 30,
	-2, 0,
-1, 176,
	14, 0,
	24, 0,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	43, 0,
	44, 0,
	-2, 63,
-1, 177,
	14, 0,
	24, 0,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	43, 0,
	44, 0,
	-2, 64,
-1, 178,
	14, 0,
	24, 0,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	43, 0,
	44, 0,
	-2, 65,
-1, 179,
	14, 0,
	24, 0,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	43, 0,
	44, 0,
	-2, 66,
-1, 180,
	14, 0,
	24, 0,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	43, 0,
	44, 0,
	-2, 67,
-1, 181,
	14, 0,
	24, 0,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	43, 0,
	44, 0,
	-2, 68,
-1, 183,
	14, 0,
	24, 0,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	43, 0,
	44, 0,
	-2, 70,
-1, 289,
	24, 0,
	44, 0,
	-2, 53,
-1, 333,
	17, 30,
	-2, 0,
-1, 355,
	17, 30,
	-2, 0,
};
#define	YYNPROD	185
#define	YYPRIVATE 57344
#define	YYLAST	4177
short	yyact[] =
{
  17, 277, 138,  66, 243, 228, 253,  54,  24,  43,
 125, 112, 200,  43, 103, 104, 100, 139, 102, 155,
 308, 185, 215, 249, 100, 253, 100, 100, 100, 107,
 105, 100, 122, 123, 124, 223, 107, 206,  43,  82,
 162,  43,  83, 103, 104,  10, 113, 314,   9, 252,
  42,  22,  44, 244,  42,  22,  44, 103, 104, 134,
 142, 113, 146, 190, 278, 352, 149, 150, 152, 153,
 148, 276, 316, 163,  23, 100, 351, 350,  23,  42,
  62,  44,  42,  22,  44,  11, 156, 168, 169,  85,
 253,  51, 321,  79,  80, 232, 190,  86, 135, 133,
 100, 318, 182, 320, 269, 258,  23, 100, 100, 100,
 100, 100, 100, 100, 108, 109, 110, 111, 233, 275,
 112, 234, 190, 110, 111,  43, 100, 112, 335, 190,
 190,  11, 203, 205, 190, 324, 278, 190, 190, 212,
 284, 190, 211, 265, 260, 190, 100, 259, 221,   3,
 141, 188, 100,  16, 226, 140, 331,   6, 156, 141,
 219, 230,   7, 100, 310,   6,  42, 170,  44, 167,
   7, 158, 100, 157, 100, 131, 100, 100, 100, 100,
 100, 100, 100, 130, 100,  48, 251, 100, 100, 129,
  49, 128, 236, 127, 100, 126, 120, 119,  52,  16,
 190,  19, 100, 312, 141, 274, 218, 100, 143, 100,
 100, 100,   4, 154, 100, 100, 217, 271, 144, 132,
 317,  50, 347, 361, 364, 270,   1, 115,  72,  40,
 224,   5, 100, 100, 100, 100, 163,  58, 163, 163,
 163, 163,  20,  67, 163, 222, 100, 293,  61, 288,
 294,  60, 238, 248,  81, 100, 100, 292,  96,   8,
 239, 159, 160,   2,   0,   0, 114,   0, 116, 117,
 118, 300, 301, 121, 164,   0, 282,   0, 285, 286,
 287, 289,   0, 100, 291,   0, 100, 100, 100,   0,
 100,   0, 100, 156,   0, 309,   0, 100,   0, 100,
 100,   0,   0, 100,   0, 100, 100, 100,   0,   0,
   0,   0,   0, 334, 313, 165, 163,  96,   0,   0,
   0,   0,   0,   0,   0,   0,   0, 341, 156, 342,
 333,   0, 340, 100,   0,   0,   0, 230, 100, 346,
 100,   0, 116,   0, 100, 100, 348,   0, 356,  96,
 194, 195, 196, 197, 198, 199, 337, 359,   0, 230,
   0, 360, 362, 156,   0, 355,   0,   0, 207,   0,
   0,   0, 238,   0,   0, 238, 238, 238,   0, 238,
 239, 238,   0, 239, 239, 239,   0, 239,  96, 239,
   0,   0,  21,   0,  96,   0,   0,   0, 338,   0,
   0,   0,   0,   0, 257, 242,   0,   0,  55,   0,
   0,   0,   0,   0,  96,   0,  96,   0,  96,  96,
  96,  96,  96,  96,  96,   0,  96, 238,   0,  96,
  96,   0,   0,   0,   0, 239, 256, 164,   0, 164,
 164, 164, 164,   0,  96, 164,   0,   0,   0, 261,
   0,  96,  96,  96,   0,   0,  96,  96,   0,   0,
   0,   0,   0, 137,   0,   0, 166,   0,   0,   0,
 147,   0,   0,   0,  96, 279, 280, 281, 165,   0,
 165, 165, 165, 165,   0,   0, 165, 184,  96,   0,
   0,   0,   0,   0,   0,   0,   0,  96,  96,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  74,   0,
 189, 191,   0,  15,   0,   0,   0, 164,   0,   0,
   0,   0,   0,   0,   0, 242,   0, 106, 242, 242,
 242,   0, 242,   0, 242,   0,   0,   0,   0,  96,
   0,  96,  96, 137,   0,  96,   0,  96,  96,  96,
 229,   0,   0, 220,   0,   0,   0, 137, 165,  15,
   0,  15,   0, 227,   0, 235,   0,   0, 145,   0,
   0,   0,   0,   0, 151,  96,   0, 137, 137,   0,
 242,   0,  96,   0,   0,   0,  96,  96,   0,   0,
   0,   0,   0, 171, 173, 175, 176, 177, 178, 179,
 180, 181, 183,   0,   0,   0,   0,   0,   0,   0,
 186, 187,   0, 262, 263, 264,   0, 266, 267, 268,
   0,   0, 201,   0,   0,   0,   0,   0, 201, 201,
   0, 273,   0,   0, 290, 208, 209, 210, 201, 213,
 214, 189,   0,   0,   0, 297,   0,   0,   0, 101,
   0,   0,   0, 295,   0,   0,   0, 303,   0,   0,
 240,   0,   0,   0,   0,   0,   0, 231,   0, 311,
 106,  98,  97,   0,   0,   0, 245,   0,   0, 137,
 241,  43,  28,   0,  30,   0,   0,   0,   0,   0,
   0,  46,  47,   0,  34,   0,  35,   0, 254,   0,
 255,   0,   0,   0,   0,   0,   0, 336, 323, 326,
 328, 329,   0,   0,  38,   0,   0,   0, 189,   0,
   0,   0,  42,  22,  44,  29,  36,  39,   0, 237,
 315,  33,   0,  37,  41,   0,   0,  27,  26,   0,
   0,  99,   0,   0,  31,  32,  23,   0,   0,   0,
   0,   0,   0, 201,   0,   0, 357, 137,   0, 296,
   0,   0,   0,   0,   0,   0, 298,   0,   0,   0,
 363, 299, 302, 365,   0, 304, 305, 306,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0, 106,   0,   0,   0,   0,   0,  75,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  16,  18,
   0,  68,  45,   0, 358,   0,   0,   0, 332,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0, 339,   0,   0,   0,   0,   0, 343,   0,
 344,  43,  28,  56,  30,  57,  73,  69,  59,  70,
   0,  46,  47,  71,  34,   0,  35,  63,  64,   0,
   0,   0,   0,   0,   0,   0,   0,  75,   0,   0,
   0,   0,  77,  78,  38,  53,   0,  16,  18,   0,
  68,  45,  42,  22,  44,  29,  36,  39,   0,   0,
   0,  33,  65,  37,  41,  76,   0,  27,  26,   0,
   0,  25,   0,   0,  31,  32,  23,   0,   0,   0,
  43,  28,  56,  30,  57,  73,  69,  59,  70,   0,
  46,  47,  71,  34,   0,  35,  63,  64,   0,   0,
   0,   0,   0,   0,  75,   0,   0,   0,   0,   0,
   0,  77,  78,  38,  16,  18,   0,  68,  45,   0,
 307,  42,  22,  44,  29,  36,  39,   0,   0,   0,
  33,  65,  37,  41,  76,   0,  27,  26,   0,   0,
  25,   0,   0,  31,  32,  23,   0,  43,  28,  56,
  30,  57,  73,  69,  59,  70,   0,  46,  47,  71,
  34,   0,  35,  63,  64,   0,   0,   0,   0,   0,
   0,   0,   0,  75,   0,   0,   0,   0,  77,  78,
  38, 272,   0,  16,  18,   0,  68,  45,  42,  22,
  44,  29,  36,  39,   0,   0,   0,  33,  65,  37,
  41,  76,   0,  27,  26,   0,   0,  25,   0,   0,
  31,  32,  23,   0,   0,   0,  43,  28,  56,  30,
  57,  73,  69,  59,  70,   0,  46,  47,  71,  34,
   0,  35,  63,  64,   0,   0,   0,   0,   0,   0,
  75,   0,   0,   0,   0,   0,   0,  77,  78,  38,
  16,  18,   0,  68,  45,   0, 247,  42,  22,  44,
  29,  36,  39,   0,   0,   0,  33,  65,  37,  41,
  76,   0,  27,  26,   0,   0,  25,   0,   0,  31,
  32,  23,   0,  43,  28,  56,  30,  57,  73,  69,
  59,  70,   0,  46,  47,  71,  34,   0,  35,  63,
  64,   0,   0,   0,   0,   0,   0,  75,   0,   0,
   0,   0,   0,   0,  77,  78,  38,  16,  18,   0,
  68,  45,   0, 246,  42,  22,  44,  29,  36,  39,
   0,   0,   0,  33,  65,  37,  41,  76,   0,  27,
  26,   0,   0,  25,   0,   0,  31,  32,  23,   0,
  43,  28,  56,  30,  57,  73,  69,  59,  70,   0,
  46,  47,  71,  34,   0,  35,  63,  64,   0,   0,
   0,   0,   0,   0,  75,   0,   0,   0,   0,   0,
   0,  77,  78,  38,  16,  18,   0,  68,  45,   0,
 225,  42,  22,  44,  29,  36,  39,   0,   0,   0,
  33,  65,  37,  41,  76,   0,  27,  26,   0,   0,
  25,   0,   0,  31,  32,  23,   0,  43,  28,  56,
  30,  57,  73,  69,  59,  70,   0,  46,  47,  71,
  34,   0,  35,  63,  64,   0,   0,   0,   0,   0,
   0,  75,   0,   0,   0,   0,   0,   0,  77,  78,
  38,  16,  18,   0,  68,  45,   0, 216,  42,  22,
  44,  29,  36,  39,   0,   0,   0,  33,  65,  37,
  41,  76,   0,  27,  26,   0,   0,  25,   0,   0,
  31,  32,  23,   0,  43,  28,  56,  30,  57,  73,
  69,  59,  70,   0,  46,  47,  71,  34,   0,  35,
  63,  64,   0,   0,   0,   0,   0,   0,  75,   0,
   0,   0,   0,   0,   0,  77,  78,  38,  16,  18,
   0,  68,  45,   0, 136,  42,  22,  44,  29,  36,
  39,   0,   0,   0,  33,  65,  37,  41,  76,   0,
  27,  26,   0,   0,  25,   0,   0,  31,  32,  23,
   0,  43,  28,  56,  30,  57,  73,  69,  59,  70,
   0,  46,  47,  71,  34,   0,  35,  63,  64,   0,
   0,   0,   0,   0,   0,  75,   0,   0,   0,   0,
   0,   0,  77,  78,  38,  16,  18,   0,  68,  45,
   0,   0,  42,  22,  44,  29,  36,  39,   0,   0,
   0,  33,  65,  37,  41,  76,   0,  27,  26,   0,
   0,  25,   0,   0,  31,  32,  23,   0,  43,  28,
  56,  30,  57,  73,  69,  59,  70,   0,  46,  47,
  71,  34,   0,  35,  63,  64,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  77,
  78,  38,   0,   0,   0,   0,   0,   0,   0,  42,
  22,  44,  29,  36,  39,   0,   0,   0,  33,  65,
  37,  41,  76,   0,  27,  26,   0,   0,  25,   0,
   0,  31,  32,  23, 190,   0, 101,  95,   0,   0,
 330,   0,   0,   0,   0,   0,   0,  93,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  98,  97,
   0,  87,  88,  89,  90,  91,  92,  94,  43,  28,
   0,  30,   0,   0,   0,   0,   0,   0,  46,  47,
   0,  34,   0,  35,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  38,   0,   0,   0,   0,   0,   0,   0,  42,
  22,  44,  29,  36,  39,   0,  84,   0,  33,   0,
  37,  41,   0,   0,  27,  26,   0,   0,  99,   0,
   0,  31,  32,  23, 190,   0, 101,  95,   0,   0,
 327,   0,   0,   0,   0,   0,   0,  93,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  98,  97,
   0,  87,  88,  89,  90,  91,  92,  94,  43,  28,
   0,  30,   0,   0,   0,   0,   0,   0,  46,  47,
   0,  34,   0,  35,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  38,   0,   0,   0,   0,   0,   0,   0,  42,
  22,  44,  29,  36,  39,   0,  84,   0,  33,   0,
  37,  41,   0,   0,  27,  26,   0,   0,  99,   0,
   0,  31,  32,  23, 190,   0, 101,  95,   0,   0,
 325,   0,   0,   0,   0,   0,   0,  93,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  98,  97,
   0,  87,  88,  89,  90,  91,  92,  94,  43,  28,
   0,  30,   0,   0,   0,   0,   0,   0,  46,  47,
   0,  34,   0,  35,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  38,   0,   0,   0,   0,   0,   0,   0,  42,
  22,  44,  29,  36,  39,   0,  84,   0,  33,   0,
  37,  41,   0,   0,  27,  26,   0,   0,  99,   0,
   0,  31,  32,  23, 141,   0,   0, 101,  95, 140,
   0,   0,   0,   0,   0,   0,   0,   0,  93,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  98,
  97,   0,  87,  88,  89,  90,  91,  92,  94,  43,
  28,   0,  30,   0,   0,   0,   0,   0,   0,  46,
  47,   0,  34,   0,  35,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,
  42,  22,  44,  29,  36,  39,   0,  84,   0,  33,
   0,  37,  41,   0,   0,  27,  26,   0,   0,  99,
   0,   0,  31,  32,  23, 190,   0, 101,  95,   0,
   0, 192,   0,   0,   0,   0,   0,   0,  93,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  98,
  97,   0,  87,  88,  89,  90,  91,  92,  94,  43,
  28,   0,  30,   0,   0,   0,   0,   0,   0,  46,
  47,   0,  34,   0,  35,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,
  42,  22,  44,  29,  36,  39,   0,  84,   0,  33,
   0,  37,  41,   0,   0,  27,  26, 101,  95,  99,
   0, 354,  31,  32,  23,   0,   0,   0,  93,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  98,
  97,   0,  87,  88,  89,  90,  91,  92,  94,  43,
  28,   0,  30,   0,   0,   0,   0,   0,   0,  46,
  47,   0,  34,   0,  35,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,
  42,  22,  44,  29,  36,  39,   0,  84,   0,  33,
   0,  37,  41,   0,   0,  27,  26, 101,  95,  99,
   0, 353,  31,  32,  23,   0,   0,   0,  93,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  98,
  97,   0,  87,  88,  89,  90,  91,  92,  94,  43,
  28,   0,  30,   0,   0,   0,   0,   0,   0,  46,
  47,   0,  34,   0,  35,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,
  42,  22,  44,  29,  36,  39,   0,  84,   0,  33,
   0,  37,  41,   0,   0,  27,  26, 101,  95,  99,
   0, 349,  31,  32,  23,   0,   0,   0,  93,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  98,
  97,   0,  87,  88,  89,  90,  91,  92,  94,  43,
  28,   0,  30,   0,   0,   0,   0,   0,   0,  46,
  47,   0,  34,   0,  35,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,
  42,  22,  44,  29,  36,  39,   0,  84,   0,  33,
   0,  37,  41,   0,   0,  27,  26,   0,   0,  99,
   0,   0,  31,  32,  23, 101,  95, 345,   0,   0,
   0,   0,   0,   0,   0,   0,  93,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  98,  97,   0,
  87,  88,  89,  90,  91,  92,  94,  43,  28,   0,
  30,   0,   0,   0,   0,   0,   0,  46,  47,   0,
  34,   0,  35,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  38,   0,   0,   0,   0,   0,   0,   0,  42,  22,
  44,  29,  36,  39,   0,  84,   0,  33,   0,  37,
  41,   0,   0,  27,  26, 101,  95,  99,   0, 322,
  31,  32,  23,   0,   0,   0,  93,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  98,  97,   0,
  87,  88,  89,  90,  91,  92,  94,  43,  28,   0,
  30,   0,   0,   0,   0,   0,   0,  46,  47,   0,
  34,   0,  35,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  38,   0,   0,   0,   0,   0,   0,   0,  42,  22,
  44,  29,  36,  39,   0,  84,   0,  33,   0,  37,
  41,   0,   0,  27,  26, 101,  95,  99,   0, 319,
  31,  32,  23,   0,   0,   0,  93,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  98,  97,   0,
  87,  88,  89,  90,  91,  92,  94,  43,  28,   0,
  30,   0,   0,   0,   0,   0,   0,  46,  47,   0,
  34,   0,  35,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  38,   0,   0,   0,   0,   0,   0,   0,  42,  22,
  44,  29,  36,  39,   0,  84,   0,  33,   0,  37,
  41,   0,   0,  27,  26, 101,  95,  99,   0, 278,
  31,  32,  23,   0,   0,   0,  93,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,  98,  97,   0,
  87,  88,  89,  90,  91,  92,  94,  43,  28,   0,
  30,   0,   0,   0,   0,   0,   0,  46,  47,   0,
  34,   0,  35,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  38,   0,   0,   0,   0,   0,   0,   0,  42,  22,
  44,  29,  36,  39,   0,  84,   0,  33,   0,  37,
  41,   0,   0,  27,  26,   0, 190,  99, 101,  95,
  31,  32,  23,   0,   0,   0,   0,   0,   0,  93,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  98,  97,   0,  87,  88,  89,  90,  91,  92,  94,
  43,  28,   0,  30,   0,   0,   0,   0,   0,   0,
  46,  47,   0,  34,   0,  35,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,
   0,  42,  22,  44,  29,  36,  39,   0,  84,   0,
  33,   0,  37,  41,   0,   0,  27,  26, 101,  95,
  99,   0, 192,  31,  32,  23,   0,   0,   0,  93,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  98,  97,   0,  87,  88,  89,  90,  91,  92,  94,
  43,  28,   0,  30,   0,   0,   0,   0,   0,   0,
  46,  47,   0,  34,   0,  35,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,
   0,  42,  22,  44,  29,  36,  39,   0,  84,   0,
  33,   0,  37,  41,   0,   0,  27,  26, 101,  95,
  99,   0,   0,  31,  32,  23,   0,   0,   0,  93,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  98,  97,   0,  87,  88,  89,  90,  91,  92,  94,
  43,  28,   0,  30,   0,   0,   0,   0,   0,   0,
  46,  47,   0,  34,   0,  35,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,
   0,  42,  22,  44,  29,  36,  39,   0,  84, 250,
  33,   0,  37,  41,   0,   0,  27,  26, 101,  95,
  99,   0,   0,  31,  32,  23,   0,   0,   0,  93,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  98,  97,   0,  87,  88,  89,  90,  91,  92,  94,
  43,  28,   0,  30,   0,   0,   0,   0,   0,   0,
  46,  47,   0,  34,   0,  35,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,
   0,  42,  22,  44,  29,  36,  39,   0,  84,   0,
  33,   0,  37,  41,   0,   0,  27,  26, 101,  95,
  99,   0,   0,  31,  32,  23,   0,   0,   0,  93,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  98,   0,   0,  87,  88,  89,  90,  91,  92,  94,
  43,  28,   0,  30,   0,   0,   0,   0,   0,   0,
  46,  47,   0,  34,   0,  35,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,
   0,  42,  22,  44,  29,  36,  39, 101,  95,   0,
  33,   0,  37,  41,   0,   0,  27,  26,  93,   0,
  99,   0,   0,  31,  32,  23,   0,   0,   0,   0,
   0,   0,  87,  88,  89,  90,  91,  92,  94,  43,
  28,   0,  30,   0,   0,   0,   0,   0,   0,  46,
  47,   0,  34,   0,  35,   0,   0,   0,   0,   0,
   0,   0,  75,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  38,  18,   0,   0,  45,   0,   0,   0,
  42,  22,  44,  29,  36,  39,   0,   0,   0,  33,
   0,  37,  41,   0,   0,  27,  26,   0,   0,  99,
   0,   0,  31,  32,  23,  43,  28,   0,  30,   0,
  73,   0,   0,   0,   0,  46,  47,   0,  34,   0,
  35,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  77,  78,  38,   0,
   0, 101,   0,   0,   0,   0,  42,  22,  44,  29,
  36,  39, 240,   0,   0,  33,   0,  37,  41,   0,
   0,  27,  26,  98,  97,  25,   0,   0,  31,  32,
  23,   0, 241,  43,  28,   0,  30,   0,   0,   0,
   0,   0,   0,  46,  47,   0,  34,   0,  35,   0,
   0,   0,   0,   0,  12,  13,   0,   0,  16,  18,
   0,   0,  45,   0,   0,   0,  38,   0,   0,   0,
   0,   0,   0,   0,  42,  22,  44,  29,  36,  39,
   0, 237,   0,  33,   0,  37,  41,   0,   0,  27,
  26,  43,  28,  99,  30,   0,  31,  32,  23,   0,
  14,  46,  47,   0,  34,   0,  35,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,  38,   0,   0, 101,   0,   0,
   0,   0,  42,  22,  44,  29,  36,  39, 240,   0,
   0,  33,   0,  37,  41,   0,   0,  27,  26,  98,
   0,  25,   0,   0,  31,  32,  23,   0, 241,  43,
  28,   0,  30,   0,   0,   0,   0,   0,   0,  46,
  47,   0,  34,   0,  35,   0,   0,   0,   0,   0,
   0,   0, 141,   0,   0,  18,   0, 140,  45,   0,
   0,   0,  38,   0,   0,   0,   0,   0,   0,   0,
  42,  22,  44,  29,  36,  39,   0, 253,   0,  33,
  18,  37,  41,  45,   0,  27,  26,  43,  28,  99,
  30,   0,  31,  32,  23,   0,   0,  46,  47,   0,
  34,   0,  35,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  43,  28,   0,  30,   0,   0,   0,   0,
  38,   0,  46,  47,   0,  34,   0,  35,  42,  22,
  44,  29,  36,  39,   0,   0,   0,  33,   0,  37,
  41,   0,   0,  27,  26,  38,   0,  25, 101,   0,
  31,  32,  23,  42,  22,  44,  29,  36,  39, 240,
   0,   0,  33,   0,  37,  41,   0,   0,  27,  26,
   0,   0,  25,   0,   0,  31,  32,  23,   0, 241,
  43,  28,   0,  30,   0,   0,   0,   0,   0,   0,
  46,  47,   0,  34,   0,  35,   0,   0,   0,   0,
   0,   0,   0, 174,   0,   0, 283,   0,   0,  45,
   0,   0,   0,  38,   0,   0,   0,   0,   0,   0,
   0,  42,  22,  44,  29,  36,  39,   0, 172,   0,
  33, 283,  37,  41,  45,   0,  27,  26,  43,  28,
  99,  30,   0,  31,  32,  23,   0,   0,  46,  47,
   0,  34,   0,  35,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  43,  28,   0,  30,   0,   0,   0,
   0,  38,   0,  46,  47,   0,  34,   0,  35,  42,
  22,  44,  29,  36,  39,   0, 253,   0,  33, 283,
  37,  41,  45,   0,  27,  26,  38,   0,  25,   0,
   0,  31,  32,  23,  42,  22,  44,  29,  36,  39,
   0,   0,   0,  33,  18,  37,  41,  45, 204,  27,
  26,  43,  28,  25,  30,   0,  31,  32,  23,   0,
   0,  46,  47,   0,  34,   0,  35,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  43,  28,   0,  30,
   0,   0,   0,   0,  38,   0,  46,  47,   0,  34,
   0,  35,  42,  22,  44,  29,  36,  39,   0,   0,
   0,  33,  18,  37,  41,  45, 202,  27,  26,  38,
   0,  25,   0,   0,  31,  32,  23,  42,  22,  44,
  29,  36,  39,   0, 174,   0,  33,  18,  37,  41,
  45,   0,  27,  26,  43,  28,  25,  30,   0,  31,
  32,  23,   0,   0,  46,  47,   0,  34,   0,  35,
   0,   0,   0,   0,   0,   0,   0,   0,   0,  43,
  28,   0,  30,   0,   0,   0,   0,  38,   0,  46,
  47,   0,  34,   0,  35,  42,  22,  44,  29,  36,
  39,   0, 172,   0,  33,  18,  37,  41,  45,   0,
  27,  26,  38,   0,  25,   0,   0,  31,  32,  23,
  42,  22,  44,  29,  36,  39,   0,   0,   0,  33,
  18,  37,  41,  45,   0,  27,  26,  43,  28,  25,
  30,   0,  31,  32,  23,   0,   0,  46,  47,   0,
  34,   0,  35,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  43,  28,   0,  30,   0,   0,   0,   0,
  38,   0,  46,  47,   0,  34,   0,  35,  42,  22,
  44,  29,  36,  39,   0,   0,   0,  33, 283,  37,
  41,  45,   0,  27,  26,  38,   0,  25,   0,   0,
  31,  32,  23,  42,  22,  44,  29,  36,  39,   0,
   0,   0,  33, 101,  37,  41,   0,   0,  27,  26,
  43,  28,  25,  30,   0,  31,  32,  23,   0,   0,
  46,  47,   0,  34,   0,  35,   0,   0,   0,   0,
   0,   0,   0,   0,   0,  43,  28,   0,  30,   0,
   0,   0,   0,  38,   0,  46,  47,   0,  34,   0,
  35,  42,  22,  44,  29,  36,  39,   0,   0, 193,
  33, 161,  37,  41,  45,   0,  27,  26,  38,   0,
  25,   0,   0,  31,  32,  23,  42,  22,  44,  29,
  36,  39,   0,   0,   0,  33, 101,  37,  41,  45,
   0,  27,  26,  43,  28,  99,  30,   0,  31,  32,
  23,   0,   0,  46,  47,   0,  34,   0,  35,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  43,  28,
   0,  30,   0,   0,   0,   0,  38,   0,  46,  47,
   0,  34,   0,  35,  42,  22,  44,  29,  36,  39,
   0,   0,   0,  33, 101,  37,  41,   0,   0,  27,
  26,  38,   0,  25,   0,   0,  31,  32,  23,  42,
  22,  44,  29,  36,  39,   0,   0,   0,  33, 101,
  37,  41,   0,   0,  27,  26,  43,  28,  25,  30,
   0,  31,  32,  23,   0,   0,  46,  47,   0,  34,
   0,  35,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  43,  28,   0,  30,   0,   0,   0,   0,  38,
   0,  46,  47,   0,  34,   0,  35,  42,  22,  44,
  29,  36,  39,   0,   0,   0,  33,   0,  37,  41,
   0,   0,  27,  26,  38,   0,  99,   0,   0,  31,
  32,  23,  42,  22,  44,  29,  36,  39,   0,   0,
   0,   0,   0,  37,  41,   0,   0,  27,  26,   0,
   0,  99,   0,   0,  31,  32,  23
};
short	yypact[] =
{
 147,-1000,-1000,-1000,3266, 175,-1000,-1000, 155,-1000,
 187, 865, 141, 141, -47,2905,-1000, -51,3817,-1000,
  13,  42,-1000,4041,-1000,3983,4041,4041, 184, 183,
4041, -36, -36, -32, 182, 180,-1000, 178, 176,-1000,
 170, 162,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,
3266, 865,3817,-1000,1336,-1000, 140, 140, 198,3392,
-1000,1403, 865, 140, 140,3392, 140,-1000, 194,-1000,
 160, 158,3958,  -7,2905,-1000, 156,-1000,-1000, 865,
 865, 154,-1000,-1000,3817,3792,3734,3817,3817,3817,
3817,3817,3817,3817,  -7, -74,  13,-1000,-1000,4041,
 -94,3817,3817,-1000,-1000, 134,1904,3900,4041,4041,
4041,4041,4041,3817,-1000,-1000, -96, -96, -96,3709,
3651,  13,-1000,-1000,  -5,4041,3817,3817,3817,3817,
3817,3817, -70,-1000,1269, 141,-1000,-1000,-1000, 196,
 194,-1000,-1000,-1000,1403,1804,-1000, -44,1202,-1000,
-1000,1804,-1000,-1000,1403,-1000, 196,3140,3817,  81,
 189,3817,3208, -65,-1000,  13,  34,3817,1135,1068,
 -63,2815,-1000,2995,-1000,3074,4066,4066,4066,4066,
4066,4066,-1000,4066,-1000, -36,2725,2905,   5,3417,
-1000,3417,-1000,4041, -96,  20,  20, -96, -96, -96,
  85,2905,-1000, 130,-1000, 127,4041,  13,2635,2635,
2635, 126, 189,2635,2635,  88,-1000, 865,-1000,-1000,
-1000,-1000,1001,-1000, 195,-1000,-1000,-1000, 104,  27,
-1000,2542,4041,4041,4041,3626, 123,3875,3568,3543,
3875,  -7,  13,3875,3817,2542,-1000,-1000, 119,-1000,
3817,-1000,  -7,-1000,2905,2905,  13,3417,-1000,-1000,
-1000,  13,3417,3417,  80,-1000,3417,3417,3417,-1000,
 932, -79,-1000,-1000,-1000, 149,  -7, 193,-1000,  13,
  13,  13,3208,3817,   3, 636,3334,3485,-1000,4066,
-1000,3208,  52, 193, 193,  15,2905,-1000,2905,2452,
  86,  75,2362, 118,1703,1603,1503,-1000, 143,3817,
 194,  47,-1000, 111,  -7,3875,-1000, 141,-1000,-1000,
-1000,-1000,-1000,3417,-1000,-1000,  -4,-1000,  -4,3417,
-1000,3817,2272,3140, 193,   3,-1000,3208, 865,2174,
  60,  59,  48,2084,1994, 194,  47,1403, 796,-1000,
-1000,-1000,-1000,-1000, 140,3140, 193,-1000,-1000,-1000,
  47,1403, 193,-1000,1403,-1000
};
short	yypgo[] =
{
   0, 263, 508,  40,  30, 262,  12, 261, 242, 201,
  45,  48, 259,   8,   3,   5, 408,   7,   0, 392,
 254, 253, 251, 248, 245, 243, 237,   2, 231, 212,
  80, 230,   1, 404,  17,  19,  97,  89, 229, 228,
 226, 224, 223, 222, 220, 219, 218, 217, 213
};
short	yyr1[] =
{
   0,  40,  40,  36,  36,  37,  37,  33,  33,  26,
  26,  24,  24,  41,  22,  42,  22,  43,  22,  20,
  20,  23,  30,  30,  34,  34,  35,  35,  29,  29,
  15,  15,   1,   1,  10,  11,  11,  11,  11,  11,
  11,  11,  44,  11,  12,  12,   6,   6,   3,   3,
   3,   3,   3,   3,   3,   3,   3,   3,   3,   2,
   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
   2,   2,   2,   2,   2,   2,   2,   2,   4,   4,
   5,   5,   7,   7,   7,  39,  39,  28,  28,  28,
  28,  31,  31,   9,   9,  45,  13,  32,  32,  14,
  14,  14,  14,  14,  14,  14,  14,  27,  27,  16,
  16,  46,  47,  16,  16,  16,  16,  16,  16,  16,
  16,  16,  16,  16,  16,  48,  16,  16,  17,  17,
  38,  38,   8,   8,   8,   8,   8,   8,   8,   8,
   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,
   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,
   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,
   8,   8,   8,   8,  18,  18,  18,  18,  21,  21,
  21,  19,  19,  19,  25
};
short	yyr2[] =
{
   0,   1,   1,   1,   2,   1,   2,   1,   2,   1,
   2,   1,   2,   0,  12,   0,  10,   0,   8,   1,
   1,   4,   1,   2,   1,   2,   0,   1,   0,   1,
   0,   1,   1,   3,   1,   1,   4,   3,   6,   3,
   4,   4,   0,   9,   1,   3,   1,   3,   3,   5,
   3,   3,   3,   3,   3,   5,   2,   1,   1,   3,
   5,   3,   3,   3,   3,   3,   3,   3,   3,   3,
   3,   3,   5,   4,   3,   2,   1,   1,   3,   3,
   1,   3,   0,   1,   3,   1,   1,   1,   1,   2,
   2,   1,   2,   1,   2,   0,   4,   1,   2,   4,
   4,   4,   2,   5,   2,   1,   1,   1,   2,   2,
   2,   0,   0,   9,   3,   2,   1,   4,   2,   3,
   2,   2,   3,   2,   2,   0,   3,   2,   1,   2,
   1,   1,   4,   3,   3,   3,   3,   3,   3,   2,
   2,   2,   3,   4,   1,   3,   4,   2,   2,   2,
   2,   2,   4,   3,   2,   1,   6,   6,   3,   6,
   6,   1,   8,   8,   6,   4,   1,   6,   6,   8,
   8,   8,   6,   1,   1,   4,   1,   2,   0,   1,
   3,   1,   1,   1,   4
};
short	yychk[] =
{
-1000, -40,  -1,   2, -29, -28,  10,  15, -12, -11,
 -10, -30,   8,   9,  54,  -2,  12, -18,  13,  -9,
  -8, -19,  87, 110, -13, 105, 102, 101,  46,  89,
  48, 108, 109,  95,  58,  60,  90,  97,  78,  91,
 -38,  98,  86,  45,  88,  16,  55,  56,  10,  15,
 -29, -30,  11,  10, -17, -16,  47,  49, -26,  52,
 -22, -23, -30,  61,  62,  96, -14, -25,  15,  51,
  53,  57, -39,  50,  -2,   2,  99,  76,  77, -30,
 -30, -20,  86,  89,  93, -37, -36,  38,  39,  40,
  41,  42,  43,  24,  44,  14,  -8,  36,  35, 105,
 -18,  13,  69, 108, 109,  -4,  -2,  16, 101, 102,
 103, 104, 107,  19,  -8,  -9,  -8,  -8,  -8,  13,
  13,  -8, -18, -18, -18,  42,  13,  13,  13,  13,
  13,  13, -45, -11, -17, -10,  18, -16, -27, -34,
  15,  10, -27,  10, -46,  -2, -27, -16, -17, -27,
 -27,  -2, -27, -27, -48, -35, -34,  13,  13,  -7,
  -5,  13,  -3, -18,  -9,  -8, -19,  13, -17, -17,
  13,  -2,  10,  -2,  10,  -2,  -2,  -2,  -2,  -2,
  -2,  -2, -13,  -2, -19,  95,  -2,  -2,  17, -33,
  11, -33,  17,  69,  -8,  -8,  -8,  -8,  -8,  -8,
  -6,  -2,  17,  -6,  17,  -6,  42,  -8,  -2,  -2,
  -2,  -6, -13,  -2,  -2,  92,  18, -30,  10, -35,
 -16, -27, -24,  79, -31,  18, -27, -16, -15, -19,
 -14,  -2,  14,  37,  40, -33,  -4,  93, -37, -36,
  24,  44,  -8,  69,  19,  -2,  18,  18, -21,  86,
  94, -18,  44,  10,  -2,  -2,  -8, -33,  20,  17,
  17,  -8, -33, -33, -33,  17, -33, -33, -33,  16,
 -17, -47,  10, -16,  10,  15,  44, -32,  17,  -8,
  -8,  -8,  -3,  13,  17,  -3,  -3,  -3, -13,  -3,
 -19,  -3,  -6, -32, -32, -33,  -2, -19,  -2,  -2,
 -13, -13,  -2, -19,  -2,  -2,  -2,  18,  99, -35,
  15, -19,  10,  -4,  44,  94,  20, -44,  86,  17,
  17,  17,  17, -33,  17,  17, -33,  17, -33, -33,
  17,  13,  -2, -35, -32,  17, -19,  -3, -30,  -2,
 -13, -18, -18,  -2,  -2,  15, -15, -43, -17,  17,
  17,  17,  17,  17,  17, -35, -32, -16,  18, -27,
 -15, -42, -32, -16, -41, -16
};
short	yydef[] =
{
  -2,  -2,   1,   2,  32,  29,  87,  88,  28,  44,
  35,   0,   0,   0,   0,  34,  22, 173,   0,  76,
  77, 174, 176,   0,  93,   0,   0,   0, 144,   0,
   0,   0,   0, 155,   0,   0, 161,   0,   0, 166,
   0,   0, 181, 182, 183,  95, 130, 131,  89,  90,
  33,   0,   0,  23,   0, 128,   0,   0, 111,   0,
 116,   0,   0,   0,   0,   0,   0, 125,  26,   9,
   0,   0,  82,   0, 105, 106,   0,  85,  86,   0,
   0,   0,  19,  20,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,  75,   5,   3,   0,
 173,   0,   0, 150, 151,   0,   0,   0,   0,   0,
   0,   0,   0,   0, 177,  94, 141, 139, 140,   0,
   0, 147, 148, 149, 154,   0,   0,   0,   0,   0,
   0,   0,   0,  45,   0,  37,  39, 129, 109, 107,
  26,  24, 110,  10,   0,   0, 115, 118,   0, 120,
 121,   0, 123, 124,   0, 127,  27,  -2,   0, 102,
  83,   0,  80, 173,  57,  58, 104,   0,   0,   0,
 178,   0,   6,  61,   4,  62,  -2,  -2,  -2,  -2,
  -2,  -2,  69,  -2,  71,  74,   0,  59,   0,   0,
   7,   0, 158,   0, 136, 133, 134, 135, 137, 138,
   0,  46, 142,   0, 145,   0,   0, 153,   0,   0,
   0,   0,  93,   0,   0,   0,  36,   0,  25, 108,
 112, 114,   0,  11, 119,  91, 122, 126,   0, 174,
  31,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,  56,   0,   0,   0,  40,  41,   0, 179,
   0,  73,   0,   8,  79,  78, 132,   0, 175, 143,
 146, 152,   0,   0,   0, 165,   0,   0,   0,  96,
   0,   0,  12, 117,  92,  26,   0,  21,  97,  99,
 100, 101,  81,   0,  84,   0,  50,  51,  52,  -2,
  54,  48,   0, 184,  42,   0,  60,  72,  47,   0,
  93,  93,   0,   0,   0,   0,   0,  38,   0,   0,
  26,   0,  98,   0,   0,   0, 103,   0, 180, 156,
 157, 159, 160,   0, 164, 167,   0, 168,   0,   0,
 172,   0,   0,  -2,  17,   0,  55,  49,   0,   0,
  93,   0,   0,   0,   0,  26,   0,   0,   0, 162,
 163, 169, 170, 171,   0,  -2,  15,  18,  43, 113,
   0,   0,  13,  16,   0,  14
};
short	yytok1[] =
{
   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0, 104,   0,   0,
  13,  17, 103, 101,  11, 102,   0,  16,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,  94,  15,
   0,   0,   0,  93,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,  19,   0,  20,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,  12,  14,  18
};
short	yytok2[] =
{
   2,   3,   4,   5,   6,   7,   8,   9,  10,  21,
  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,
  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,
  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,
  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,
  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,
  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,
  92,  95,  96,  97,  98,  99, 100, 105, 106, 107,
 108, 109, 110, 111
};
long	yytok3[] =
{
   0
};
#define YYFLAG 		-1000
#define YYERROR		goto yyerrlab
#define YYACCEPT	return(0)
#define YYABORT		return(1)
#define	yyclearin	yychar = -1
#define	yyerrok		yyerrflag = 0

#ifdef	yydebug
#include	"y.debug"
#else
#define	yydebug		0
char*	yytoknames[1];		/* for debugging */
char*	yystates[1];		/* for debugging */
#endif

/*	parser for yacc output	*/

int	yynerrs = 0;		/* number of errors */
int	yyerrflag = 0;		/* error recovery flag */

extern	int	fprint(int, char*, ...);
extern	int	sprint(char*, char*, ...);

char*
yytokname(int yyc)
{
	static char x[10];

	if(yyc > 0 && yyc <= sizeof(yytoknames)/sizeof(yytoknames[0]))
	if(yytoknames[yyc-1])
		return yytoknames[yyc-1];
	sprintf(x, "<%d>", yyc);
	return x;
}

char*
yystatname(int yys)
{
	static char x[10];

	if(yys >= 0 && yys < sizeof(yystates)/sizeof(yystates[0]))
	if(yystates[yys])
		return yystates[yys];
	sprintf(x, "<%d>\n", yys);
	return x;
}

long
yylex1(void)
{
	long yychar;
	long *t3p;
	int c;

	yychar = yylex();
	if(yychar <= 0) {
		c = yytok1[0];
		goto out;
	}
	if(yychar < sizeof(yytok1)/sizeof(yytok1[0])) {
		c = yytok1[yychar];
		goto out;
	}
	if(yychar >= YYPRIVATE)
		if(yychar < YYPRIVATE+sizeof(yytok2)/sizeof(yytok2[0])) {
			c = yytok2[yychar-YYPRIVATE];
			goto out;
		}
	for(t3p=yytok3;; t3p+=2) {
		c = t3p[0];
		if(c == yychar) {
			c = t3p[1];
			goto out;
		}
		if(c == 0)
			break;
	}
	c = 0;

out:
	if(c == 0)
		c = yytok2[1];	/* unknown char */
	if(yydebug >= 3)
		printf("lex %.4lX %s\n", yychar, yytokname(c));
	return c;
}

int
yyparse(void)
{
	struct
	{
		YYSTYPE	yyv;
		int	yys;
	} yys[YYMAXDEPTH], *yyp, *yypt;
	short *yyxi;
	int yyj, yym, yystate, yyn, yyg;
	YYSTYPE save1, save2;
	int save3, save4;
	long yychar;

	save1 = yylval;
	save2 = yyval;
	save3 = yynerrs;
	save4 = yyerrflag;

	yystate = 0;
	yychar = -1;
	yynerrs = 0;
	yyerrflag = 0;
	yyp = &yys[-1];
	goto yystack;

ret0:
	yyn = 0;
	goto ret;

ret1:
	yyn = 1;
	goto ret;

ret:
	yylval = save1;
	yyval = save2;
	yynerrs = save3;
	yyerrflag = save4;
	return yyn;

yystack:
	/* put a state and value onto the stack */
	if(yydebug >= 4)
		printf("char %s in %s", yytokname(yychar), yystatname(yystate));

	yyp++;
	if(yyp >= &yys[YYMAXDEPTH]) { 
		yyerror("yacc stack overflow"); 
		goto ret1; 
	}
	yyp->yys = yystate;
	yyp->yyv = yyval;

yynewstate:
	yyn = yypact[yystate];
	if(yyn <= YYFLAG)
		goto yydefault; /* simple state */
	if(yychar < 0)
		yychar = yylex1();
	yyn += yychar;
	if(yyn < 0 || yyn >= YYLAST)
		goto yydefault;
	yyn = yyact[yyn];
	if(yychk[yyn] == yychar) { /* valid shift */
		yychar = -1;
		yyval = yylval;
		yystate = yyn;
		if(yyerrflag > 0)
			yyerrflag--;
		goto yystack;
	}

yydefault:
	/* default state action */
	yyn = yydef[yystate];
	if(yyn == -2) {
		if(yychar < 0)
			yychar = yylex1();

		/* look through exception table */
		for(yyxi=yyexca;; yyxi+=2)
			if(yyxi[0] == -1 && yyxi[1] == yystate)
				break;
		for(yyxi += 2;; yyxi += 2) {
			yyn = yyxi[0];
			if(yyn < 0 || yyn == yychar)
				break;
		}
		yyn = yyxi[1];
		if(yyn < 0)
			goto ret0;
	}
	if(yyn == 0) {
		/* error ... attempt to resume parsing */
		switch(yyerrflag) {
		case 0:   /* brand new error */
			yyerror("syntax error");
			if(yydebug >= 1) {
				printf("%s", yystatname(yystate));
				printf("saw %s\n", yytokname(yychar));
			}
yyerrlab:
			yynerrs++;

		case 1:
		case 2: /* incompletely recovered error ... try again */
			yyerrflag = 3;

			/* find a state where "error" is a legal shift action */
			while(yyp >= yys) {
				yyn = yypact[yyp->yys] + YYERRCODE;
				if(yyn >= 0 && yyn < YYLAST) {
					yystate = yyact[yyn];  /* simulate a shift of "error" */
					if(yychk[yystate] == YYERRCODE)
						goto yystack;
				}

				/* the current yyp has no shift onn "error", pop stack */
				if(yydebug >= 2)
					printf("error recovery pops state %d, uncovers %d\n",
						yyp->yys, (yyp-1)->yys );
				yyp--;
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1;

		case 3:  /* no shift yet; clobber input char */
			if(yydebug >= YYEOFCODE)
				printf("error recovery discards %s\n", yytokname(yychar));
			if(yychar == YYEOFCODE)
				goto ret1;
			yychar = -1;
			goto yynewstate;   /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if(yydebug >= 2)
		printf("reduce %d in:\n\t%s", yyn, yystatname(yystate));

	yypt = yyp;
	yyp -= yyr2[yyn];
	yyval = (yyp+1)->yyv;
	yym = yyn;

	/* consult goto table to find next state */
	yyn = yyr1[yyn];
	yyg = yypgo[yyn];
	yyj = yyg + yyp->yys + 1;

	if(yyj >= YYLAST || yychk[yystate=yyact[yyj]] != -yyn)
		yystate = yyact[yyg];
	switch(yym) {
		
case 1:
#line	98	"/n/bopp/v7/bwk/awk/awkgram.y"
{ if (errorflag==0)
			winner = (Node *)stat3(PROGRAM, beginloc, yypt[-0].yyv.p, endloc); } break;
case 2:
#line	100	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyclearin; bracecheck(); SYNTAX("bailing out"); } break;
case 13:
#line	124	"/n/bopp/v7/bwk/awk/awkgram.y"
{inloop++;} break;
case 14:
#line	125	"/n/bopp/v7/bwk/awk/awkgram.y"
{ --inloop; yyval.p = stat4(FOR, yypt[-9].yyv.p, notnull(yypt[-6].yyv.p), yypt[-3].yyv.p, yypt[-0].yyv.p); } break;
case 15:
#line	126	"/n/bopp/v7/bwk/awk/awkgram.y"
{inloop++;} break;
case 16:
#line	127	"/n/bopp/v7/bwk/awk/awkgram.y"
{ --inloop; yyval.p = stat4(FOR, yypt[-7].yyv.p, NIL, yypt[-3].yyv.p, yypt[-0].yyv.p); } break;
case 17:
#line	128	"/n/bopp/v7/bwk/awk/awkgram.y"
{inloop++;} break;
case 18:
#line	129	"/n/bopp/v7/bwk/awk/awkgram.y"
{ --inloop; yyval.p = stat3(IN, yypt[-5].yyv.p, makearr(yypt[-3].yyv.p), yypt[-0].yyv.p); } break;
case 19:
#line	133	"/n/bopp/v7/bwk/awk/awkgram.y"
{ setfname(yypt[-0].yyv.cp); } break;
case 20:
#line	134	"/n/bopp/v7/bwk/awk/awkgram.y"
{ setfname(yypt[-0].yyv.cp); } break;
case 21:
#line	138	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = notnull(yypt[-1].yyv.p); } break;
case 26:
#line	150	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.i = 0; } break;
case 28:
#line	155	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.i = 0; } break;
case 30:
#line	161	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = 0; } break;
case 32:
#line	166	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = 0; } break;
case 33:
#line	167	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = yypt[-1].yyv.p; } break;
case 34:
#line	171	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = notnull(yypt[-0].yyv.p); } break;
case 35:
#line	175	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = stat2(PASTAT, yypt[-0].yyv.p, stat2(PRINT, rectonode(), NIL)); } break;
case 36:
#line	176	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = stat2(PASTAT, yypt[-3].yyv.p, yypt[-1].yyv.p); } break;
case 37:
#line	177	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = pa2stat(yypt[-2].yyv.p, yypt[-0].yyv.p, stat2(PRINT, rectonode(), NIL)); } break;
case 38:
#line	178	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = pa2stat(yypt[-5].yyv.p, yypt[-3].yyv.p, yypt[-1].yyv.p); } break;
case 39:
#line	179	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = stat2(PASTAT, NIL, yypt[-1].yyv.p); } break;
case 40:
#line	181	"/n/bopp/v7/bwk/awk/awkgram.y"
{ beginloc = linkum(beginloc, yypt[-1].yyv.p); yyval.p = 0; } break;
case 41:
#line	183	"/n/bopp/v7/bwk/awk/awkgram.y"
{ endloc = linkum(endloc, yypt[-1].yyv.p); yyval.p = 0; } break;
case 42:
#line	184	"/n/bopp/v7/bwk/awk/awkgram.y"
{infunc++;} break;
case 43:
#line	185	"/n/bopp/v7/bwk/awk/awkgram.y"
{ infunc--; curfname=0; defn((Cell *)yypt[-7].yyv.p, yypt[-5].yyv.p, yypt[-1].yyv.p); yyval.p = 0; } break;
case 45:
#line	190	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = linkum(yypt[-2].yyv.p, yypt[-0].yyv.p); } break;
case 47:
#line	195	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = linkum(yypt[-2].yyv.p, yypt[-0].yyv.p); } break;
case 48:
#line	199	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op2(yypt[-1].yyv.i, yypt[-2].yyv.p, yypt[-0].yyv.p); } break;
case 49:
#line	201	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op3(CONDEXPR, notnull(yypt[-4].yyv.p), yypt[-2].yyv.p, yypt[-0].yyv.p); } break;
case 50:
#line	203	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op2(BOR, notnull(yypt[-2].yyv.p), notnull(yypt[-0].yyv.p)); } break;
case 51:
#line	205	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op2(AND, notnull(yypt[-2].yyv.p), notnull(yypt[-0].yyv.p)); } break;
case 52:
#line	206	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op3(yypt[-1].yyv.i, NIL, yypt[-2].yyv.p, (Node*)makedfa(yypt[-0].yyv.s, 0)); } break;
case 53:
#line	208	"/n/bopp/v7/bwk/awk/awkgram.y"
{ if (constnode(yypt[-0].yyv.p))
			yyval.p = op3(yypt[-1].yyv.i, NIL, yypt[-2].yyv.p, (Node*)makedfa(strnode(yypt[-0].yyv.p), 0));
		  else
			yyval.p = op3(yypt[-1].yyv.i, (Node *)1, yypt[-2].yyv.p, yypt[-0].yyv.p); } break;
case 54:
#line	212	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op2(INTEST, yypt[-2].yyv.p, makearr(yypt[-0].yyv.p)); } break;
case 55:
#line	213	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op2(INTEST, yypt[-3].yyv.p, makearr(yypt[-0].yyv.p)); } break;
case 56:
#line	214	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op2(CAT, yypt[-1].yyv.p, yypt[-0].yyv.p); } break;
case 59:
#line	220	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op2(yypt[-1].yyv.i, yypt[-2].yyv.p, yypt[-0].yyv.p); } break;
case 60:
#line	222	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op3(CONDEXPR, notnull(yypt[-4].yyv.p), yypt[-2].yyv.p, yypt[-0].yyv.p); } break;
case 61:
#line	224	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op2(BOR, notnull(yypt[-2].yyv.p), notnull(yypt[-0].yyv.p)); } break;
case 62:
#line	226	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op2(AND, notnull(yypt[-2].yyv.p), notnull(yypt[-0].yyv.p)); } break;
case 63:
#line	227	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op2(yypt[-1].yyv.i, yypt[-2].yyv.p, yypt[-0].yyv.p); } break;
case 64:
#line	228	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op2(yypt[-1].yyv.i, yypt[-2].yyv.p, yypt[-0].yyv.p); } break;
case 65:
#line	229	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op2(yypt[-1].yyv.i, yypt[-2].yyv.p, yypt[-0].yyv.p); } break;
case 66:
#line	230	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op2(yypt[-1].yyv.i, yypt[-2].yyv.p, yypt[-0].yyv.p); } break;
case 67:
#line	231	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op2(yypt[-1].yyv.i, yypt[-2].yyv.p, yypt[-0].yyv.p); } break;
case 68:
#line	232	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op2(yypt[-1].yyv.i, yypt[-2].yyv.p, yypt[-0].yyv.p); } break;
case 69:
#line	233	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op3(yypt[-1].yyv.i, NIL, yypt[-2].yyv.p, (Node*)makedfa(yypt[-0].yyv.s, 0)); } break;
case 70:
#line	235	"/n/bopp/v7/bwk/awk/awkgram.y"
{ if (constnode(yypt[-0].yyv.p))
			yyval.p = op3(yypt[-1].yyv.i, NIL, yypt[-2].yyv.p, (Node*)makedfa(strnode(yypt[-0].yyv.p), 0));
		  else
			yyval.p = op3(yypt[-1].yyv.i, (Node *)1, yypt[-2].yyv.p, yypt[-0].yyv.p); } break;
case 71:
#line	239	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op2(INTEST, yypt[-2].yyv.p, makearr(yypt[-0].yyv.p)); } break;
case 72:
#line	240	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op2(INTEST, yypt[-3].yyv.p, makearr(yypt[-0].yyv.p)); } break;
case 73:
#line	241	"/n/bopp/v7/bwk/awk/awkgram.y"
{ 
			if (safe) SYNTAX("cmd | getline is unsafe");
			else yyval.p = op3(GETLINE, yypt[-0].yyv.p, itonp(yypt[-2].yyv.i), yypt[-3].yyv.p); } break;
case 74:
#line	244	"/n/bopp/v7/bwk/awk/awkgram.y"
{ 
			if (safe) SYNTAX("cmd | getline is unsafe");
			else yyval.p = op3(GETLINE, (Node*)0, itonp(yypt[-1].yyv.i), yypt[-2].yyv.p); } break;
case 75:
#line	247	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op2(CAT, yypt[-1].yyv.p, yypt[-0].yyv.p); } break;
case 78:
#line	253	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = linkum(yypt[-2].yyv.p, yypt[-0].yyv.p); } break;
case 79:
#line	254	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = linkum(yypt[-2].yyv.p, yypt[-0].yyv.p); } break;
case 81:
#line	259	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = linkum(yypt[-2].yyv.p, yypt[-0].yyv.p); } break;
case 82:
#line	263	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = rectonode(); } break;
case 84:
#line	265	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = yypt[-1].yyv.p; } break;
case 93:
#line	282	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op3(MATCH, NIL, rectonode(), (Node*)makedfa(yypt[-0].yyv.s, 0)); } break;
case 94:
#line	283	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op1(NOT, notnull(yypt[-0].yyv.p)); } break;
case 95:
#line	287	"/n/bopp/v7/bwk/awk/awkgram.y"
{startreg();} break;
case 96:
#line	287	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.s = yypt[-1].yyv.s; } break;
case 99:
#line	295	"/n/bopp/v7/bwk/awk/awkgram.y"
{ 
			if (safe) SYNTAX("print | is unsafe");
			else yyval.p = stat3(yypt[-3].yyv.i, yypt[-2].yyv.p, itonp(yypt[-1].yyv.i), yypt[-0].yyv.p); } break;
case 100:
#line	298	"/n/bopp/v7/bwk/awk/awkgram.y"
{
			if (safe) SYNTAX("print >> is unsafe");
			else yyval.p = stat3(yypt[-3].yyv.i, yypt[-2].yyv.p, itonp(yypt[-1].yyv.i), yypt[-0].yyv.p); } break;
case 101:
#line	301	"/n/bopp/v7/bwk/awk/awkgram.y"
{
			if (safe) SYNTAX("print > is unsafe");
			else yyval.p = stat3(yypt[-3].yyv.i, yypt[-2].yyv.p, itonp(yypt[-1].yyv.i), yypt[-0].yyv.p); } break;
case 102:
#line	304	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = stat3(yypt[-1].yyv.i, yypt[-0].yyv.p, NIL, NIL); } break;
case 103:
#line	305	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = stat2(DELETE, makearr(yypt[-3].yyv.p), yypt[-1].yyv.p); } break;
case 104:
#line	306	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = stat2(DELETE, makearr(yypt[-0].yyv.p), 0); } break;
case 105:
#line	307	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = exptostat(yypt[-0].yyv.p); } break;
case 106:
#line	308	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyclearin; SYNTAX("illegal statement"); } break;
case 109:
#line	317	"/n/bopp/v7/bwk/awk/awkgram.y"
{ if (!inloop) SYNTAX("break illegal outside of loops");
				  yyval.p = stat1(BREAK, NIL); } break;
case 110:
#line	319	"/n/bopp/v7/bwk/awk/awkgram.y"
{  if (!inloop) SYNTAX("continue illegal outside of loops");
				  yyval.p = stat1(CONTINUE, NIL); } break;
case 111:
#line	321	"/n/bopp/v7/bwk/awk/awkgram.y"
{inloop++;} break;
case 112:
#line	321	"/n/bopp/v7/bwk/awk/awkgram.y"
{--inloop;} break;
case 113:
#line	322	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = stat2(DO, yypt[-6].yyv.p, notnull(yypt[-2].yyv.p)); } break;
case 114:
#line	323	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = stat1(EXIT, yypt[-1].yyv.p); } break;
case 115:
#line	324	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = stat1(EXIT, NIL); } break;
case 117:
#line	326	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = stat3(IF, yypt[-3].yyv.p, yypt[-2].yyv.p, yypt[-0].yyv.p); } break;
case 118:
#line	327	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = stat3(IF, yypt[-1].yyv.p, yypt[-0].yyv.p, NIL); } break;
case 119:
#line	328	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = yypt[-1].yyv.p; } break;
case 120:
#line	329	"/n/bopp/v7/bwk/awk/awkgram.y"
{ if (infunc)
				SYNTAX("next is illegal inside a function");
			  yyval.p = stat1(NEXT, NIL); } break;
case 121:
#line	332	"/n/bopp/v7/bwk/awk/awkgram.y"
{ if (infunc)
				SYNTAX("nextfile is illegal inside a function");
			  yyval.p = stat1(NEXTFILE, NIL); } break;
case 122:
#line	335	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = stat1(RETURN, yypt[-1].yyv.p); } break;
case 123:
#line	336	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = stat1(RETURN, NIL); } break;
case 125:
#line	338	"/n/bopp/v7/bwk/awk/awkgram.y"
{inloop++;} break;
case 126:
#line	338	"/n/bopp/v7/bwk/awk/awkgram.y"
{ --inloop; yyval.p = stat2(WHILE, yypt[-2].yyv.p, yypt[-0].yyv.p); } break;
case 127:
#line	339	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = 0; } break;
case 129:
#line	344	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = linkum(yypt[-1].yyv.p, yypt[-0].yyv.p); } break;
case 132:
#line	352	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op2(DIVEQ, yypt[-3].yyv.p, yypt[-0].yyv.p); } break;
case 133:
#line	353	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op2(ADD, yypt[-2].yyv.p, yypt[-0].yyv.p); } break;
case 134:
#line	354	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op2(MINUS, yypt[-2].yyv.p, yypt[-0].yyv.p); } break;
case 135:
#line	355	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op2(MULT, yypt[-2].yyv.p, yypt[-0].yyv.p); } break;
case 136:
#line	356	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op2(DIVIDE, yypt[-2].yyv.p, yypt[-0].yyv.p); } break;
case 137:
#line	357	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op2(MOD, yypt[-2].yyv.p, yypt[-0].yyv.p); } break;
case 138:
#line	358	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op2(POWER, yypt[-2].yyv.p, yypt[-0].yyv.p); } break;
case 139:
#line	359	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op1(UMINUS, yypt[-0].yyv.p); } break;
case 140:
#line	360	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = yypt[-0].yyv.p; } break;
case 141:
#line	361	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op1(NOT, notnull(yypt[-0].yyv.p)); } break;
case 142:
#line	362	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op2(BLTIN, itonp(yypt[-2].yyv.i), rectonode()); } break;
case 143:
#line	363	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op2(BLTIN, itonp(yypt[-3].yyv.i), yypt[-1].yyv.p); } break;
case 144:
#line	364	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op2(BLTIN, itonp(yypt[-0].yyv.i), rectonode()); } break;
case 145:
#line	365	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op2(CALL, celltonode(yypt[-2].yyv.cp,CVAR), NIL); } break;
case 146:
#line	366	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op2(CALL, celltonode(yypt[-3].yyv.cp,CVAR), yypt[-1].yyv.p); } break;
case 147:
#line	367	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op1(CLOSE, yypt[-0].yyv.p); } break;
case 148:
#line	368	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op1(PREDECR, yypt[-0].yyv.p); } break;
case 149:
#line	369	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op1(PREINCR, yypt[-0].yyv.p); } break;
case 150:
#line	370	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op1(POSTDECR, yypt[-1].yyv.p); } break;
case 151:
#line	371	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op1(POSTINCR, yypt[-1].yyv.p); } break;
case 152:
#line	372	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op3(GETLINE, yypt[-2].yyv.p, itonp(yypt[-1].yyv.i), yypt[-0].yyv.p); } break;
case 153:
#line	373	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op3(GETLINE, NIL, itonp(yypt[-1].yyv.i), yypt[-0].yyv.p); } break;
case 154:
#line	374	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op3(GETLINE, yypt[-0].yyv.p, NIL, NIL); } break;
case 155:
#line	375	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op3(GETLINE, NIL, NIL, NIL); } break;
case 156:
#line	377	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op2(INDEX, yypt[-3].yyv.p, yypt[-1].yyv.p); } break;
case 157:
#line	379	"/n/bopp/v7/bwk/awk/awkgram.y"
{ SYNTAX("index() doesn't permit regular expressions");
		  yyval.p = op2(INDEX, yypt[-3].yyv.p, (Node*)yypt[-1].yyv.s); } break;
case 158:
#line	381	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = yypt[-1].yyv.p; } break;
case 159:
#line	383	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op3(MATCHFCN, NIL, yypt[-3].yyv.p, (Node*)makedfa(yypt[-1].yyv.s, 1)); } break;
case 160:
#line	385	"/n/bopp/v7/bwk/awk/awkgram.y"
{ if (constnode(yypt[-1].yyv.p))
			yyval.p = op3(MATCHFCN, NIL, yypt[-3].yyv.p, (Node*)makedfa(strnode(yypt[-1].yyv.p), 1));
		  else
			yyval.p = op3(MATCHFCN, (Node *)1, yypt[-3].yyv.p, yypt[-1].yyv.p); } break;
case 161:
#line	389	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = celltonode(yypt[-0].yyv.cp, CCON); } break;
case 162:
#line	391	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op4(SPLIT, yypt[-5].yyv.p, makearr(yypt[-3].yyv.p), yypt[-1].yyv.p, (Node*)STRING); } break;
case 163:
#line	393	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op4(SPLIT, yypt[-5].yyv.p, makearr(yypt[-3].yyv.p), (Node*)makedfa(yypt[-1].yyv.s, 1), (Node *)REGEXPR); } break;
case 164:
#line	395	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op4(SPLIT, yypt[-3].yyv.p, makearr(yypt[-1].yyv.p), NIL, (Node*)STRING); } break;
case 165:
#line	396	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op1(yypt[-3].yyv.i, yypt[-1].yyv.p); } break;
case 166:
#line	397	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = celltonode(yypt[-0].yyv.cp, CCON); } break;
case 167:
#line	399	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op4(yypt[-5].yyv.i, NIL, (Node*)makedfa(yypt[-3].yyv.s, 1), yypt[-1].yyv.p, rectonode()); } break;
case 168:
#line	401	"/n/bopp/v7/bwk/awk/awkgram.y"
{ if (constnode(yypt[-3].yyv.p))
			yyval.p = op4(yypt[-5].yyv.i, NIL, (Node*)makedfa(strnode(yypt[-3].yyv.p), 1), yypt[-1].yyv.p, rectonode());
		  else
			yyval.p = op4(yypt[-5].yyv.i, (Node *)1, yypt[-3].yyv.p, yypt[-1].yyv.p, rectonode()); } break;
case 169:
#line	406	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op4(yypt[-7].yyv.i, NIL, (Node*)makedfa(yypt[-5].yyv.s, 1), yypt[-3].yyv.p, yypt[-1].yyv.p); } break;
case 170:
#line	408	"/n/bopp/v7/bwk/awk/awkgram.y"
{ if (constnode(yypt[-5].yyv.p))
			yyval.p = op4(yypt[-7].yyv.i, NIL, (Node*)makedfa(strnode(yypt[-5].yyv.p), 1), yypt[-3].yyv.p, yypt[-1].yyv.p);
		  else
			yyval.p = op4(yypt[-7].yyv.i, (Node *)1, yypt[-5].yyv.p, yypt[-3].yyv.p, yypt[-1].yyv.p); } break;
case 171:
#line	413	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op3(SUBSTR, yypt[-5].yyv.p, yypt[-3].yyv.p, yypt[-1].yyv.p); } break;
case 172:
#line	415	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op3(SUBSTR, yypt[-3].yyv.p, yypt[-1].yyv.p, NIL); } break;
case 175:
#line	421	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op2(ARRAY, makearr(yypt[-3].yyv.p), yypt[-1].yyv.p); } break;
case 176:
#line	422	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op1(INDIRECT, celltonode(yypt[-0].yyv.cp, CVAR)); } break;
case 177:
#line	423	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op1(INDIRECT, yypt[-0].yyv.p); } break;
case 178:
#line	427	"/n/bopp/v7/bwk/awk/awkgram.y"
{ arglist = yyval.p = 0; } break;
case 179:
#line	428	"/n/bopp/v7/bwk/awk/awkgram.y"
{ arglist = yyval.p = celltonode(yypt[-0].yyv.cp,CVAR); } break;
case 180:
#line	429	"/n/bopp/v7/bwk/awk/awkgram.y"
{
			checkdup(yypt[-2].yyv.p, yypt[-0].yyv.cp);
			arglist = yyval.p = linkum(yypt[-2].yyv.p,celltonode(yypt[-0].yyv.cp,CVAR)); } break;
case 181:
#line	435	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = celltonode(yypt[-0].yyv.cp, CVAR); } break;
case 182:
#line	436	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op1(ARG, itonp(yypt[-0].yyv.i)); } break;
case 183:
#line	437	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = op1(VARNF, (Node *) yypt[-0].yyv.cp); } break;
case 184:
#line	442	"/n/bopp/v7/bwk/awk/awkgram.y"
{ yyval.p = notnull(yypt[-1].yyv.p); } break;
	}
	goto yystack;  /* stack new state and value */
}
